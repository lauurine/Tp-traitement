{"name":"GBM8770","settings":"{\"settings\":\"{\\r\\n    \\\"python.analysis.autoImportCompletions\\\": true,\\r\\n    \\\"python.analysis.fixAll\\\": [\\\"source.unusedImports\\\"],  \\r\\n    \\\"editor.defaultFormatter\\\": \\\"ms-python.black-formatter\\\",\\r\\n    \\\"files.exclude\\\": {\\r\\n        \\\"**/__pycache__\\\": true,\\r\\n        \\\"**/.cache\\\": true,\\r\\n        \\\"**/.coverage\\\": true,\\r\\n        \\\"**/.coverage.*\\\": true,\\r\\n        \\\"**/.hypothesis\\\": true,\\r\\n        \\\"**/.mypy_cache\\\": true,\\r\\n        \\\"**/.nox\\\": true,\\r\\n        \\\"**/.pytest_cache\\\": true,\\r\\n        \\\"**/.ruff_cache\\\": true,\\r\\n        \\\"**/.tox\\\": true\\r\\n    }\\r\\n\\r\\n}\"}","snippets":"{\"snippets\":{\"python.json\":\"\\n{\\n    \\\"if\\\": {\\n        \\\"prefix\\\": \\\"if\\\",\\n        \\\"body\\\": [\\\"if ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an if statement\\\"\\n    },\\n    \\\"if/else\\\": {\\n        \\\"prefix\\\": \\\"if/else\\\",\\n        \\\"body\\\": [\\\"if ${1:condition}:\\\", \\\"\\\\t${2:pass}\\\", \\\"else:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an if statement with else\\\"\\n    },\\n    \\\"elif\\\": {\\n        \\\"prefix\\\": \\\"elif\\\",\\n        \\\"body\\\": [\\\"elif ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an elif\\\"\\n    },\\n    \\\"else\\\": {\\n        \\\"prefix\\\": \\\"else\\\",\\n        \\\"body\\\": [\\\"else:\\\", \\\"\\\\t${1:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an else\\\"\\n    },\\n    \\\"while\\\": {\\n        \\\"prefix\\\": \\\"while\\\",\\n        \\\"body\\\": [\\\"while ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a while loop\\\"\\n    },\\n    \\\"while/else\\\": {\\n        \\\"prefix\\\": \\\"while/else\\\",\\n        \\\"body\\\": [\\\"while ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\", \\\"else:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a while loop with else\\\"\\n    },\\n    \\\"for\\\": {\\n        \\\"prefix\\\": \\\"for\\\",\\n        \\\"body\\\": [\\\"for ${1:target_list} in ${2:expression_list}:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a for loop\\\"\\n    },\\n    \\\"for/else\\\": {\\n        \\\"prefix\\\": \\\"for/else\\\",\\n        \\\"body\\\": [\\\"for ${1:target_list} in ${2:expression_list}:\\\", \\\"\\\\t${3:pass}\\\", \\\"else:\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a for loop with else\\\"\\n    },\\n    \\\"try/except\\\": {\\n        \\\"prefix\\\": \\\"try/except\\\",\\n        \\\"body\\\": [\\\"try:\\\", \\\"\\\\t${1:pass}\\\", \\\"except ${2:expression} as ${3:identifier}:\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a try/except statement\\\"\\n    },\\n    \\\"try/finally\\\": {\\n        \\\"prefix\\\": \\\"try/finally\\\",\\n        \\\"body\\\": [\\\"try:\\\", \\\"\\\\t${1:pass}\\\", \\\"finally:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a try/finally statement\\\"\\n    },\\n    \\\"try/except/else\\\": {\\n        \\\"prefix\\\": \\\"try/except/else\\\",\\n        \\\"body\\\": [\\n            \\\"try:\\\",\\n            \\\"\\\\t${1:pass}\\\",\\n            \\\"except ${2:expression} as ${3:identifier}:\\\",\\n            \\\"\\\\t${4:pass}\\\",\\n            \\\"else:\\\",\\n            \\\"\\\\t${5:pass}\\\"\\n        ],\\n        \\\"description\\\": \\\"Code snippet for a try/except/else statement\\\"\\n    },\\n    \\\"try/except/finally\\\": {\\n        \\\"prefix\\\": \\\"try/except/finally\\\",\\n        \\\"body\\\": [\\n            \\\"try:\\\",\\n            \\\"\\\\t${1:pass}\\\",\\n            \\\"except ${2:expression} as ${3:identifier}:\\\",\\n            \\\"\\\\t${4:pass}\\\",\\n            \\\"finally:\\\",\\n            \\\"\\\\t${5:pass}\\\"\\n        ],\\n        \\\"description\\\": \\\"Code snippet for a try/except/finally statement\\\"\\n    },\\n    \\\"try/except/else/finally\\\": {\\n        \\\"prefix\\\": \\\"try/except/else/finally\\\",\\n        \\\"body\\\": [\\n            \\\"try:\\\",\\n            \\\"\\\\t${1:pass}\\\",\\n            \\\"except ${2:expression} as ${3:identifier}:\\\",\\n            \\\"\\\\t${4:pass}\\\",\\n            \\\"else:\\\",\\n            \\\"\\\\t${5:pass}\\\",\\n            \\\"finally:\\\",\\n            \\\"\\\\t${6:pass}\\\"\\n        ],\\n        \\\"description\\\": \\\"Code snippet for a try/except/else/finally statement\\\"\\n    },\\n    \\\"with\\\": {\\n        \\\"prefix\\\": \\\"with\\\",\\n        \\\"body\\\": [\\\"with ${1:expression} as ${2:target}:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a with statement\\\"\\n    },\\n    \\\"def\\\": {\\n        \\\"prefix\\\": \\\"def\\\",\\n        \\\"body\\\": [\\\"def ${1:funcname}(${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\",\\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a function definition\\\"\\n    },\\n    \\\"def(class method)\\\": {\\n        \\\"prefix\\\": \\\"def(class method)\\\",\\n        \\\"body\\\": [\\\"def ${1:funcname}(self, ${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a class method\\\"\\n    },\\n    \\\"def(static class method)\\\": {\\n        \\\"prefix\\\": \\\"def(static class method)\\\",\\n        \\\"body\\\": [\\\"@staticmethod\\\", \\\"def ${1:funcname}(${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a static class method\\\"\\n    },\\n    \\\"def(abstract class method)\\\": {\\n        \\\"prefix\\\": \\\"def(abstract class method)\\\",\\n        \\\"body\\\": [\\\"def ${1:funcname}(self, ${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\traise NotImplementedError\\\"],\\n        \\\"description\\\": \\\"Code snippet for an abstract class method\\\"\\n    },\\n    \\\"class\\\": {\\n        \\\"prefix\\\": \\\"class\\\",\\n        \\\"body\\\": [\\\"class ${1:classname}(${2:object}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a class definition\\\"\\n    },\\n    \\\"lambda\\\": {\\n        \\\"prefix\\\": \\\"lambda\\\",\\n        \\\"body\\\": [\\\"lambda ${1:parameter_list}: ${2:expression}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a lambda statement\\\"\\n    },\\n    \\\"if(main)\\\": {\\n        \\\"prefix\\\": \\\"__main__\\\",\\n        \\\"body\\\": [\\\"if __name__ == \\\\\\\"__main__\\\\\\\":\\\", \\\"    ${1:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a `if __name__ == \\\\\\\"__main__\\\\\\\": ...` block\\\"\\n    },\\n    \\\"async/def\\\": {\\n        \\\"prefix\\\": \\\"async/def\\\",\\n        \\\"body\\\": [\\\"async def ${1:funcname}(${2:parameter_list}):\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async statement\\\"\\n    },\\n    \\\"async/for\\\": {\\n        \\\"prefix\\\": \\\"async/for\\\",\\n        \\\"body\\\": [\\\"async for ${1:target} in ${2:iter}:\\\", \\\"\\\\t${3:block}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async for statement\\\"\\n    },\\n    \\\"async/for/else\\\": {\\n        \\\"prefix\\\": \\\"async/for/else\\\",\\n        \\\"body\\\": [\\\"async for ${1:target} in ${2:iter}:\\\", \\\"\\\\t${3:block}\\\", \\\"else:\\\", \\\"\\\\t${4:block}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async for statement with else\\\"\\n    },\\n    \\\"async/with\\\": {\\n        \\\"prefix\\\": \\\"async/with\\\",\\n        \\\"body\\\": [\\\"async with ${1:expr} as ${2:var}:\\\", \\\"\\\\t${3:block}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async with statement\\\"\\n    }\\n}\"}}","extensions":"[{\"identifier\":{\"id\":\"charliermarsh.ruff\",\"uuid\":\"c2ca9b43-fa38-44fc-928e-5125970b9c00\"},\"displayName\":\"Ruff\",\"preRelease\":true},{\"identifier\":{\"id\":\"donjayamanne.python-environment-manager\",\"uuid\":\"0c9f60fd-5588-42f7-9176-e80c3ae111ec\"},\"displayName\":\"Python Environment Manager\"},{\"identifier\":{\"id\":\"ms-python.black-formatter\",\"uuid\":\"859e640c-c157-47da-8699-9080b81c8371\"},\"displayName\":\"Black Formatter\",\"preRelease\":true},{\"identifier\":{\"id\":\"ms-python.python\",\"uuid\":\"f1f59ae4-9318-4f3c-a9b5-81b2eaa5f8a5\"},\"displayName\":\"Python\",\"preRelease\":true},{\"identifier\":{\"id\":\"ms-python.vscode-pylance\",\"uuid\":\"364d2426-116a-433a-a5d8-a5098dc3afbd\"},\"displayName\":\"Pylance\",\"preRelease\":true},{\"identifier\":{\"id\":\"ms-toolsai.jupyter\",\"uuid\":\"6c2f1801-1e7f-45b2-9b5c-7782f1e076e8\"},\"displayName\":\"Jupyter\"},{\"identifier\":{\"id\":\"ms-toolsai.jupyter-keymap\",\"uuid\":\"9f6dc8db-620c-4844-b8c5-e74914f1be27\"},\"displayName\":\"Jupyter Keymap\"},{\"identifier\":{\"id\":\"ms-toolsai.jupyter-renderers\",\"uuid\":\"b15c72f8-d5fe-421a-a4f7-27ed9f6addbf\"},\"displayName\":\"Jupyter Notebook Renderers\"},{\"identifier\":{\"id\":\"ms-toolsai.vscode-jupyter-cell-tags\",\"uuid\":\"ab4fb32a-befb-4102-adf9-1652d0cd6a5e\"},\"displayName\":\"Jupyter Cell Tags\"},{\"identifier\":{\"id\":\"ms-toolsai.vscode-jupyter-slideshow\",\"uuid\":\"e153ca70-b543-4865-b4c5-b31d34185948\"},\"displayName\":\"Jupyter Slide Show\"},{\"identifier\":{\"id\":\"njpwerner.autodocstring\",\"uuid\":\"2d6fea35-f68e-461d-9b7b-5cd05be99451\"},\"displayName\":\"autoDocstring - Python Docstring Generator\"},{\"identifier\":{\"id\":\"tamasfe.even-better-toml\",\"uuid\":\"b2215d5f-675e-4a2b-b6ac-1ca737518b78\"},\"displayName\":\"Even Better TOML\"}]"}